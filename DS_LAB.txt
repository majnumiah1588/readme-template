1.  	Traversing: carry out the following operations on an Array 
a)  	Maximum Value b) Minimum Value c) Average Value d) Total Value e) Sin Value 
2.  	Inserting: Insert
a)  	54 to a sorted array. b) Rahim to a sorted array. c) 99 to position 5. d) Karim to position 5. 
3.  	Deleting:
a)  	Delete Karim from a sorted array. b) Delete an Item from position 2. 
4.  	Sorting:
a)  	Sort integer data using Bubble sort. b) Sort string data using Bubble sort. 
5.  	Searching:
a)  	Search for 77 using Linear/Binary Search. b) Search for Karim using Linear/BinaryÂ Search.



    // Insert 54 into a sorted array
    int newValue = 54;
    for (i = 0; i < size; i++) {
        if (arr[i] > newValue) {
            pos = i;
            break;
        }
    }
    for (i = size; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = newValue;
    size++;



 int newValue = 54;
    for (pos = 0; pos < size; pos++) {
        if (arr[pos] > newValue) {
            break;
        }
    }
    for (int i = size; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = newValue;
    size++;

       // Insert "Rahim" into a sorted array
    string nameArr[] = {"Ali", "Ahmad", "Fahad", "Raza", "Zain"}; // Assuming array is already sorted
    int nameSize = sizeof(nameArr) / sizeof(nameArr[0]);
    string newName = "Rahim";
    int namePos;
    for (namePos = 0; namePos < nameSize; namePos++) {
        if (nameArr[namePos] > newName) {
            break;
        }
    }
    for (int i = nameSize; i > namePos; i--) {
        nameArr[i] = nameArr[i - 1];
    }
    nameArr[namePos] = newName;
    nameSize++;

    // Insert 99 to position 5 in an array
    int newValuePos = 5;
    int newValuePosIndex = newValuePos - 1;
    int newValueToInsert = 99;
    for (int i = size; i > newValuePosIndex; i--) {
        arr[i] = arr[i - 1];
    }
    arr[newValuePosIndex] = newValueToInsert;
    size++;

    // Insert "Karim" to position 5 in an array
     string nameToInsert = "Karim";
    int nameInsertPos = 5;
    int nameInsertPosIndex = nameInsertPos - 1;
    for (int i = nameSize; i > nameInsertPosIndex; i--) {
        nameArr[i] = nameArr[i - 1];
    }
    nameArr[nameInsertPosIndex] = nameToInsert;
    nameSize++;

    // Displaying the modified arrays
     cout << "Modified Integer Array:" <<  endl;
    for (int i = 0; i < size; i++) {
         cout << arr[i] << " ";
    }
     cout <<  endl;

     cout << "Modified String Array:" <<  endl;
    for (int i = 0; i < nameSize; i++) {
         cout << nameArr[i] << " ";
    }

       int arr[] = {12, 23, 45, 56, 78, 99}; // Assuming array is already sorted
    int size = sizeof(arr) / sizeof(arr[0]);

    // Delete Karim from a sorted array
     string nameArr[] = {"Ali", "Ahmad", "Fahad", "Karim", "Raza", "Zain"}; // Assuming array is already sorted
    int nameSize = sizeof(nameArr) / sizeof(nameArr[0]);

    // Finding position to remove Karim from the string array
    int namePosToRemove = -1;
     string nameToRemove = "Karim";
    for (int i = 0; i < nameSize; i++) {
        if (nameArr[i] == nameToRemove) {
            namePosToRemove = i;
            break;
        }
    }

    // Removing Karim from the string array
    if (namePosToRemove != -1) {
        for (int i = namePosToRemove; i < nameSize - 1; i++) {
            nameArr[i] = nameArr[i + 1];
        }
        nameSize--;
    }

    // Delete an item from position 2 in an integer array
    int posToRemoveIndex = 1;
    if (posToRemoveIndex >= 0 && posToRemoveIndex < size) {
        for (int i = posToRemoveIndex; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }
        size--;
    }

    // Displaying the modified arrays
     cout << "Modified Integer Array:" <<  endl;
    for (int i = 0; i < size; i++) {
         cout << arr[i] << " ";
    }
     cout <<  endl;

     cout << "Modified String Array:" <<  endl;
    for (int i = 0; i < nameSize; i++) {
         cout << nameArr[i] << " ";
    }
     cout <<  endl;
}